(*  
    Formalization of a lazily sampled random permutation 
    as an EasyCrypt module that can be used in arbitrary
    games.

    It is very similar in structure to RFth.
*)

require import AllCore Distr SmtMap Dexcepted.

type output.
type input = output.

(* We need to sample from the output type whatever it is *)
op doutput : output distr.

(* The following axioms define the uniform distribution over the
   output type. *)

(* Sampling must always terminate and the distribution adds to 1%r *)
axiom doutput_ll : is_lossless doutput.
(* All values in the support have the same probability *)
axiom doutput_uni : is_uniform doutput.
(* All values are in the support *)
axiom doutput_full : is_full doutput.

module type Orcl = {
  proc f(i:input) : output
}.

module type Orcl_i = {
  proc init() : unit
  include Orcl
}.


module RP = {
  var m : (input, output) fmap

  proc init() = { 
    m <- empty;
  } 

  proc f(x : input) = {
    var r;
    if (x \notin m) {
      r <$ doutput \ rng m;
      m.[x] <- r;
    }
    return oget m.[x];
  } 
}.

