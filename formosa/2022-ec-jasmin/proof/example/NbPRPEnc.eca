require import AllCore SmtMap List Distr.
require (****) PRPth NbEnc.

(* Will work for arbitrary types *)

type plaintext.

clone include NbEnc with
  type nonce      =  plaintext,
  type plaintext  <- plaintext,
  type ciphertext =  plaintext,
  op used_nonce = (fun n (nonces:nonce list) => n \in nonces).

clone import PRPth as PRPth_ with
  type PRFth_.key    <- key,
  type input  <- nonce,
  op PRFth_.q        <- q,
  op doutput <- dciphertext
  rename "doutput" as "dciphertext".

(* We need so axiom on the distribution *)
axiom dciphertext_ll: is_lossless dciphertext.
axiom dciphertext_uni: is_uniform dciphertext.
axiom dciphertext_full: is_full dciphertext.

(* XOR operator over plaintexts with minimal properties *)
op (^) : plaintext -> plaintext -> plaintext.
axiom xor_idempotent1 x y : (x ^ y) ^ y = x.
axiom xor_idempotent2 x y : y ^ ( y ^ x) = x.

(* Encryption and decryption operators *)
op enc k n p = f k n ^ p.
op dec k n c = f k n ^ c.

(* We prove that decryption recovers an encrypted 
   message using the core logic. This lemma can
   then be used to prove that the scheme is correct. *)
lemma enc_dec_correct k n p :
  dec k n (enc k n p) = p.
proof. by rewrite /enc /dec xor_idempotent2. qed.

(* The encryption scheme in the correct syntax. *)
module Scheme : Scheme_T = {

  proc kg () = {
    var k;
    k <$ dkey;
    return k;
  }
  
  proc enc(k:key, n:nonce, p:plaintext) = {
    var mask, c;
    mask <- f k n;
    c <- mask ^ p;
    return c;
  }

  proc dec(k:key, n:nonce, c:ciphertext) = {
    var mask, p;
    mask <- f k n;
    p <- mask ^ c;
    return p;
  }
}.

(*************************************************************)
(*                          SECURITY                         *)
(*************************************************************)

(* B is a reduction that breaks PRF if A breaks encryption scheme  *)

module (B(A:AdvCPA):Adv) (O:Orcl) = {
  
  module OCPA = {
    proc init() = { }

    proc enc (n:nonce, p:plaintext) = {
      var r;
      r <@ O.f(n);
      return (r ^ p);
    }
  }

  proc guess = CPA(A, OCPA).main

}.

section PROOF.

(*  Declaring an adversary in a section quantifies  universally
    over A for all results in the section. The names in brackets
    indicate that A cannot touch the internal states of these
    modules. Otherwise the proof fails (e.g., A could just get
    the PRF key! *)
declare module A <: AdvCPA {-RealScheme, -RealPRF, -RF, -RP, -WO, -Count}.
declare axiom A_ll (O <: OrclCPA) :  islossless O.enc => islossless A(O).main.

(* We prove equivalences between games using pRHL, which then
   allow us to derive probability results as a consequence.
   These equivalences talk about how events occurring in
   one game relate to events occurring in the other game. *)

(* If PRF game is uses PRF then we are using the real scheme.
   There is a syntactic identity between the games modulo
   renamings. 
   If A starts from the same state, then both games output 
   the same result res and the global counter has the same
   value, so B makes same queries as A. *)
lemma Real_CPA_PRF : 
  equiv [ CPA(A, RealScheme(Scheme)).main ~ PRF(B(A), RealPRF).main :
            ={glob A} ==> ={res} ].
proof.
proc; inline *; wp. 
call (: ={WO.nonces} /\ RealScheme.k{1} = RealPRF.k{2} /\ (size WO.nonces = Count.c){2}).
+ proc; inline *; auto => /> /#.
by auto => />.
qed.

lemma pr_Real_CPA_PRF &m :
  Pr[ CPA(A, RealScheme(Scheme)).main() @ &m : res] = 
  Pr[ PRF(B(A), RealPRF).main() @ &m : res].
proof. byequiv  Real_CPA_PRF => //. qed.

lemma pr_prp_prf &m: 
  `| Pr[ PRF(B(A), RP).main() @ &m : res] - Pr[ PRF(B(A), RF).main() @ &m : res] | <=
      (q * (q - 1))%r / 2%r * mu1 dciphertext witness.
proof.
apply (prp_prf (B(A)) _ &m).
move=> O O_ll; islossless.
apply (A_ll (<:WO(B(A, O).OCPA)) _).
islossless.
qed.

(* If PRF game uses RF then we are using the ideal scheme.
   We need to argue that xor acts as a one time pad to get the
   equivalence.  *)
lemma Ideal_CPA_PRF : 
  equiv [ CPA(A, IdealScheme).main ~ PRF(B(A), RF).main : 
            ={glob A} ==> ={res} ].
proof.
proc; inline *; wp.
call (: ={WO.nonces} /\ (size WO.nonces = Count.c){2} /\
            (forall n, n \in WO.nonces = n \in RF.m){2}).
+ proc; inline *.
  sp; if; 1, 3: by auto => /#.
  rcondt{2} ^if; 1: by auto => /#.  
  rcondt{2} ^if; 1: by auto => /#.  
  sp; wp => /=. 
  conseq (: c0{1} = (r1 ^ p0){2}) => />; 1: smt(get_setE).
  rnd (fun r => r ^ p{2}). 
  auto => />; smt (get_setE xor_idempotent1).
by auto => /> *; rewrite mem_empty.
qed.

lemma pr_Ideal_CPA_PRF &m :
  Pr[ CPA(A, IdealScheme).main() @ &m : res] = 
  Pr[ PRF(B(A), RF).main() @ &m : res].
proof. byequiv  Ideal_CPA_PRF => //. qed.

lemma indcpa_security &m :
   (* Advantages match *)
  `| Pr[CPA(A,RealScheme(Scheme)).main() @ &m : res] - 
       Pr[CPA(A,IdealScheme).main() @ &m : res]| <= 
  `| Pr[PRF(B(A), RealPRF).main() @ &m : res] - 
       Pr[PRF(B(A), RP).main() @ &m : res] | + (q * (q - 1))%r / 2%r * mu1 dciphertext witness.
proof. 
  rewrite pr_Real_CPA_PRF pr_Ideal_CPA_PRF. 
  have := (pr_prp_prf &m).
  smt().
qed.

end section PROOF.

(* print indcpa_security. *)

